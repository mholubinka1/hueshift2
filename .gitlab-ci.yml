image: docker:19.03.8

variables:
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:19.03.8-dind

before_script:
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin "$DOCKER_REGISTRY"
  
stages:
  - build
  - coverage
  - push

build-master:
  stage: build
  coverage: '/Total\s*\|\s*(\d+\.?\d+)/'
  script:
    - docker build --rm=false --pull -t "$DOCKER_REGISTRY_IMAGE" .
  after_script:
    - id=`docker images --filter "label=unit-test" -q`
    - docker container create --name test-reports $id
    - docker cp test-reports:/app/HueShift2Tests/unit_test_report.xml .
    - docker cp test-reports:/app/HueShift2Tests/coverage.xml .
    - docker rm test-reports
  artifacts:
    when: always
    paths:
      - ./unit_test_report.xml
      - ./coverage.xml
    reports:
      junit:
        - ./unit_test_report.xml
  only:
    - master
  tags:
    - docker
    
build-dev:
  stage: build
  coverage: '/Total\s*\|\s*(\d+\.?\d+)/'
  script:
    - docker build --rm=false --pull -t "$DOCKER_REGISTRY_IMAGE:dev" .
  after_script:
    - id=`docker images --filter "label=unit-test" -q`
    - docker container create --name test-reports $id
    - docker cp test-reports:/app/HueShift2Tests/unit_test_report.xml .
    - docker cp test-reports:/app/HueShift2Tests/coverage .
    - docker rm test-report
  artifacts:
    when: always
    paths:
      - ./unit_test_report.xml
      - ./coverage.xml
    reports:
      junit:
        - ./unit_test_report.xml
  except:
    - master
  tags:
    - docker

coverage-master:
  image: alpine:latest
  stage: coverage
  variables:
    JOB_NAME: build-master
    TARGET_BRANCH: master
  before_script:
    - apk add --update --no-cache curl jq
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMMIT_BRANCH != $TARGET_BRANCH'
  script:
    - echo "$CI_COMMIT_REF_NAME"
    - echo "$TARGET_BRANCH"
    - echo "$CI_COMMIT_BRANCH"
    - TARGET_PIPELINE_ID=`curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines?ref=${TARGET_BRANCH}&status=success&private_token=${RUNNER_ACCESS_TOKEN}" | jq "[.[] ] | .[0].id"`
    - TARGET_COVERAGE=`curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${TARGET_PIPELINE_ID}/jobs?private_token=${RUNNER_ACCESS_TOKEN}" | jq --arg JOB_NAME "$JOB_NAME" '.[] | select(.name==$JOB_NAME) | .coverage'`
    - echo "$TARGET_COVERAGE"
    - CURRENT_COVERAGE=`curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?private_token=${RUNNER_ACCESS_TOKEN}" | jq --arg JOB_NAME "$JOB_NAME" '.[] | select(.name==$JOB_NAME) | .coverage'`
    - echo "$CURRENT_COVERAGE"
    - DIFFERENCE=$(echo "$TARGET_COVERAGE-$CURRENT_COVERAGE" |bc -l)
    - echo "$DIFFERENCE"
    - if (( $(scale = 4; echo "$DIFFERENCE > 0.0001" |bc -l) )); then echo "Coverage decreased from ${TARGET_COVERAGE} to ${CURRENT_COVERAGE}. Build Failed." && exit 1; else echo "Build Succeeded."; fi;
  tags:
    - rpi

push-master:
  stage: push
  script:
    - docker push "$DOCKER_REGISTRY_IMAGE"
  only:
    - master
  tags:
    - docker

push-dev:
  stage: push
  script:
    - docker push "$DOCKER_REGISTRY_IMAGE:dev"
  except:
    - master
  tags:
    - docker
